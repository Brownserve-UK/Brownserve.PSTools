<#
.SYNOPSISp
    Initializes this repository
#>
# We require 6.0+ due to using newer features of PowerShell
#Requires -Version 6.0
[CmdletBinding()]
param (
    # If set will disable the compatible/incompatible cmdlet output at the end of the script
    [Parameter(
        Mandatory = $false
    )]
    [switch]
    $SuppressOutput
)
# Stop on errors
$ErrorActionPreference = 'Stop'

Write-Host 'Initialising repository, please wait...'

# We use this well-known global variable across a variety of projects for determining if given scripts/functions/cmdlets
# are compatible with the users operating system.
$Global:BrownserveCmdlets = @{
    CompatibleCmdlets   = @()
    IncompatibleCmdlets = @()
}

# If we're on Teamcity set the well-known $Global:CI variable, this is set on most other CI/CD providers but not Teamcity :(
if ($env:TEAMCITY_VERSION)
{
    Write-Verbose 'Running on Teamcity, setting $Global:CI'
    $env:CI = $true
}
    
# Suppress output on CI/CD - it's noisy
if ($env:CI)
{
    $SuppressOutput = $true
}

# Set up our permanent paths
$Global:RepoRootDirectory = (Resolve-Path (Get-Item $PSScriptRoot -Force).PSParentPath) | Convert-Path # -Force flag is needed to find dot folders on *.nix
$Global:RepoBuildDirectory = $PSScriptRoot | Convert-Path
###PERMANENT_PATHS###

# Set-up our ephemeral paths, that is those that will be destroyed and then recreated each time this script is called
###EPHEMERAL_PATHS###

try
{
    Write-Verbose 'Recreating ephemeral paths'
    $EphemeralPaths | ForEach-Object {
        if ((Test-Path $_))
        {
            Remove-Item $_ -Recurse -Force | Out-Null
        }
        New-Item $_ -ItemType Directory -Force | Out-Null
    }
}
catch
{
    Write-Error $_.Exception.Message
    break
}

###EPHEMERAL_PATH_VARIABLES###

# We use paket for managing our dependencies and we get that via dotnet
Write-Verbose "Restoring dotnet tools"
$DotnetOutput = & dotnet tool restore
if ($LASTEXITCODE -ne 0)
{
    $DotnetOutput
    throw "dotnet tool restore failed"
}

Write-Verbose "Installing paket dependencies"
$PaketOutput = & dotnet paket install
if ($LASTEXITCODE -ne 0)
{
    $PaketOutput
    throw "Failed to install paket dependencies"
}

# If Brownserve.PSTools is already loaded in this session we need to unload it
if ((Get-Module 'Brownserve.PSTools'))
{
    try
    {
        Write-Verbose "Unloading Brownserve.PSTools"
        Remove-Module 'Brownserve.PSTools' -Force -Confirm:$false
    }
    catch
    {
        throw "Failed to unload Brownserve.PSTools.`n$($_.Exception.Message)"
    }
}
# Import the downloaded version of Brownserve.PSTools
try
{
    Write-Verbose "Importing Brownserve.PSTools module"
    Import-Module (Join-Path $Global:RepoPackagesDirectory 'Brownserve.PSTools', 'tools', 'Brownserve.PSTools.psd1') -Force -Verbose:$false
}
catch
{
    throw "Failed to import Brownserve.PSTools.`n$($_.Exception.Message)"
}
###CUSTOM_MODULE_LOADER###
### Start user defined _init steps
    # Place any custom code here, this will be preserved whenever you update your _init script###CUSTOM_INIT_STEPS###
### End user defined _init steps

# If we're not suppressing output then we'll pipe out a list of cmdlets that are now available to the user along with
# Their synopsis. 
if (!$SuppressOutput)
{
    if ($Global:BrownserveCmdlets.CompatibleCmdlets)
    {
        Write-Host 'The following cmdlets are now available:'
        $Global:BrownserveCmdlets.CompatibleCmdlets | ForEach-Object {
            Write-Host "    $($_.Name) " -ForegroundColor Magenta -NoNewline; Write-Host "|  $($_.Synopsis)" -ForegroundColor Blue
        }
        Write-Host "For more information please use the 'Get-Help <command-name>' command`n"
    }
    if ($Global:BrownserveCmdlets.IncompatibleCmdlets)
    {
        Write-Warning 'The following cmdlets are not compatible with your operating system and have been disabled:'
        $Global:BrownserveCmdlets.IncompatibleCmdlets | ForEach-Object {
            Write-Host "  $($_.Name)" -ForegroundColor Yellow
        }
        '' # Blank line to break up output out a little
    }
}